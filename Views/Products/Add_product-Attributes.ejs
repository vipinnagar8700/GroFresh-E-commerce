<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="csrf-token"
      content="wMxuTXoaEzrQMkJ3BFSGetCzeGuQ2upnYIQWCmjs"
    />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <title>Add new attribute</title>
    <link
      rel="icon"
      type="image/x-icon"
      href="https://grofresh-admin.6amtech.com/storage/app/public/restaurant/2023-11-21-655c75526b81b.png"
    />
    <link rel="shortcut icon" href />
    <link
      rel="stylesheet"
      href="https://grofresh-admin.6amtech.com/public/assets/admin/css/vendor.min.css"
    />
    <link
      rel="stylesheet"
      href="https://grofresh-admin.6amtech.com/public/assets/admin/vendor/icon-set/style.css"
    />
    <link
      rel="stylesheet"
      href="https://grofresh-admin.6amtech.com/public/assets/admin/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://grofresh-admin.6amtech.com/public/assets/admin/css/owl.min.css"
    />
    <link
      rel="stylesheet"
      href="https://grofresh-admin.6amtech.com/public/assets/admin/css/theme.minc619.css?v=1.0"
    />
    <link
      rel="stylesheet"
      href="https://grofresh-admin.6amtech.com/public/assets/admin/css/style.css"
    />
    <script src="https://grofresh-admin.6amtech.com/public/assets/admin/vendor/hs-navbar-vertical-aside/hs-navbar-vertical-aside-mini-cache.js"></script>
    <link
      rel="stylesheet"
      href="https://grofresh-admin.6amtech.com/public/assets/admin/css/toastr.css"
    />
    <link
      rel="stylesheet"
      href="https://grofresh-admin.6amtech.com/public/assets/admin/css/custom-helper.css"
    />
  </head>
  <body class="footer-offset" id="demo">
    <div class="container">
      <div class="row">
        <div class="col-md-12">
          <div class="d-none" id="loading">
            <div class="loader-image">
              <img
                width="200"
                src="https://grofresh-admin.6amtech.com/public/assets/admin/img/loader.gif"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
    <%- include('../Layout/Header') %>
    <div id="headerFluid" class="d-none"></div>
    <div id="headerDouble" class="d-none"></div>
    <%- include('../Layout/Sidebar') %>
    <main id="content" role="main" class="main pointer-event">
      <div class="content container-fluid">
        <div class="page-header">
          <h1 class="page-header-title">
            <span class="page-header-icon">
              <img
                src="https://grofresh-admin.6amtech.com/public/assets/admin/img/attribute.png"
                class="w--24"
                alt="Attribute"
              />
            </span>
            <span> Attribute Setup </span>
          </h1>
        </div>
        <div class="card">
          <div class="card-header border-0">
            <div class="card--header">
              <h5 class="card-title">
                Attribute Table
                <span class="badge badge-soft-secondary" id="badge-count"
                  >1</span
                >
              </h5>
              <form id="searchForm">
                <div class="input-group">
                  <input
                    id="datatableSearch_"
                    type="search"
                    name="search"
                    class="form-control"
                    placeholder="Search"
                    aria-label="Search"
                    autocomplete="off"
                    required
                  />
                  <div class="input-group-append">
                    <button type="submit" class="input-group-text">
                      <i class="tio-search">aaaa</i>
                    </button>
                  </div>
                </div>
              </form>
              <button
                class="btn btn--primary ml-lg-4"
                data-toggle="modal"
                data-target="#attribute-modal"
              >
                <i class="tio-add"></i> Add attribute
              </button>
            </div>
          </div>
          <div class="table-responsive datatable-custom">
            <table
              class="table table-borderless table-thead-bordered table-nowrap table-align-middle card-table"
            >
              <thead class="thead-light">
                <tr>
                  <th>SL</th>
                  <th>Name</th>
                  <th class="text-center">Action</th>
                </tr>
              </thead>
              <tbody id="attribute-table-body"></tbody>
            </table>
            <table>
              <tfoot></tfoot>
            </table>
          </div>
        </div>
      </div>
      <div class="modal fade" tabindex="-1" id="attribute-modal">
        <div class="modal-dialog">
          <div class="modal-content">
            <form id="add-attribute-form">
              <div class="modal-body pt-3">
                <input
                  type="hidden"
                  name="_token"
                  value="wMxuTXoaEzrQMkJ3BFSGetCzeGuQ2upnYIQWCmjs"
                  autocomplete="off"
                />
                <ul class="nav nav-tabs mb-4">
                  <li class="nav-item">
                    <a class="nav-link lang_link active" href="#" id="en-link"
                      >Add Attribute</a
                    >
                  </li>
                </ul>
                <div class="row">
                  <div class="col-12">
                    <div class="form-group lang_form" id="en-form">
                      <label class="input-label" for="exampleFormControlInput1"
                        >Name (EN)</label
                      >
                      <input
                        type="text"
                        name="name"
                        id="attribute-name"
                        class="form-control"
                        placeholder="New attribute"
                        required
                        maxlength="255"
                        oninvalid="document.getElementById('en-link').click()"
                      />
                    </div>
                    <input type="hidden" name="lang[]" value="en" />
                    <input type="hidden" name="lang[]" value="ar" />
                  </div>
                </div>
                <div class="btn--container justify-content-end">
                  <button
                    type="reset"
                    class="btn btn--reset"
                    data-dismiss="modal"
                  >
                    Cancel
                  </button>
                  <button type="submit" class="btn btn--primary">Submit</button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
      <div class="modal fade" tabindex="-1" id="attribute-modala">
        <div class="modal-dialog">
          <div class="modal-content">
            <form id="edit-attribute-form">
              <div class="modal-body pt-3">
                <input
                  type="hidden"
                  name="_token"
                  value="wMxuTXoaEzrQMkJ3BFSGetCzeGuQ2upnYIQWCmjs"
                  autocomplete="off"
                />
                <ul class="nav nav-tabs mb-4">
                  <li class="nav-item">
                    <a class="nav-link lang_link active" href="#" id="en-link"
                      >Edit Attribute</a
                    >
                  </li>
                </ul>
                <div class="row">
                  <div class="col-12">
                    <div class="form-group lang_form" id="en-form">
                      <label class="input-label" for="exampleFormControlInput1"
                        >Name (EN)</label
                      >
                      <input
                        type="text"
                        name="name"
                        id="attribute-namea"
                        class="form-control"
                        placeholder="New attribute"
                        required
                        maxlength="255"
                        oninvalid="document.getElementById('en-link').click()"
                      />
                    </div>
                    <input type="hidden" name="lang[]" value="en" />
                    <input type="hidden" name="lang[]" value="ar" />
                  </div>
                </div>
                <div class="btn--container justify-content-end">
                  <button
                    type="reset"
                    class="btn btn--reset"
                    data-dismiss="modal"
                  >
                    Cancel
                  </button>
                  <button type="submit" class="btn btn--primary">Submit</button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>

      <!-- Include your existing card HTML here -->

      <%- include('../Layout/Header') %>
      <div class="modal fade" id="popup-modal">
        <div class="modal-dialog modal-dialog-centered" role="document">
          <div class="modal-content">
            <div class="modal-body">
              <div class="row">
                <div class="col-12">
                  <div class="text-center">
                    <h2 class="order-check-colour">
                      <i class="tio-shopping-cart-outlined"></i> You have new
                      order Check Please.
                    </h2>
                    <hr />
                    <button id="check-order" class="btn btn-primary">
                      Ok let me check
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const myHeaders = new Headers();
        myHeaders.append("Content-Type", "application/json");

        const fetchAttributes = (searchQuery = "") => {
          let url = "/api/v1/allProductattribute";

          const requestOptions = {
            method: "GET",
            headers: myHeaders,
            redirect: "follow",
          };

          fetch(url, requestOptions)
            .then((response) => {
              if (!response.ok) {
                throw new Error("Network response was not ok");
              }
              return response.json();
            })
            .then((data) => {
              const tableBody = document.getElementById("attribute-table-body");
              const filteredCategories = data.filter((category) => {
                // Assuming you want to filter based on category name or id
                return (
                  category.name
                    .toLowerCase()
                    .includes(searchQuery.toLowerCase()) ||
                  category._id.toLowerCase().includes(searchQuery.toLowerCase())
                );
              });

              const badgeCount = document.getElementById("badge-count");

              // Clear existing table rows
              tableBody.innerHTML = "";

              // Populate table with fetched data
              filteredCategories.forEach((attribute, index) => {
                const row = document.createElement("tr");
                row.innerHTML = `
        <td>${index + 1}</td>
        <td><span class="d-block font-size-sm text-body text-trim-70">${
          attribute.name
        }</span></td>
        <td>
            <div class="btn--container justify-content-center">
                <a class="action-btn edit-btn" data-toggle="modal" data-target="#attribute-modala" data-id="${
                  attribute._id
                }" data-name="${attribute.name}">
                    <i class="tio-edit"></i>
                </a>
                <a class="action-btn btn--danger btn-outline-danger form-alert" href="javascript:;" data-id="attribute-${
                  attribute._id
                }" data-message="Want to delete this">
                    <i class="tio-delete-outlined"></i>
                </a>
            </div>
        </td>
    `;
                tableBody.appendChild(row);

                // Add delete event listener
                row
                  .querySelector(".btn--danger")
                  .addEventListener("click", function () {
                    if (confirm("Want to delete this")) {
                      deleteAttribute(attribute._id);
                    }
                  });

                // Add edit event listener
                row
                  .querySelector(".edit-btn")
                  .addEventListener("click", function () {
                    const attributeId = this.getAttribute("data-id");
                    const attributeName = this.getAttribute("data-name");
                    console.log(attributeId, "attributeId");
                    // Populate modal fields
                    document.getElementById("attribute-namea").value =
                      attributeName;
                    editAttribute(attributeId);
                    // You may need to store the attribute ID in a hidden field or in a way that your form can access it upon submission
                    document.getElementById("edit-attribute-form").dataset.id =
                      attributeId;
                  });
              });

              // Handle form submission for edit
              document
                .getElementById("edit-attribute-form")
                .addEventListener("submit", function (event) {
                  event.preventDefault();

                  const attributeId = this.dataset.id;
                  const attributeName =
                    document.getElementById("attribute-namea").value;

                  // Perform your update operation here, e.g., sending a request to the server
                  updateAttribute(attributeId, attributeName);
                });

              // Update badge count
              badgeCount.textContent = filteredCategories.length;
            })
            .catch((error) => console.error("Error fetching data:", error));
        };
        const editAttribute = (editAttribute) => {
          console.log("first");
          const requestOptions = {
            method: "GET",
            headers: myHeaders,
            redirect: "follow",
          };

          fetch(`/api/v1/singleattribute/${editAttribute}`, requestOptions)
            .then((response) => {
              if (!response.ok) {
                throw new Error("Network response was not ok");
              }
              return response.json();
            })
            .then((result) => {
              console.log("Attribute Edited:", result);
              // Fetch and update the attribute list
              fetchAttributes();
            })
            .catch((error) =>
              console.error("Error deleting attribute:", error)
            );
        };
        const updateAttribute = (attributeId, attributeName) => {
          console.log("first");
          const raw = JSON.stringify({
            name: attributeName,
          });
          const requestOptions = {
            method: "PUT",
            headers: myHeaders,
            body: raw,
            redirect: "follow",
          };

          fetch(`/api/v1/updateattribute/${attributeId}`, requestOptions)
            .then((response) => {
              if (!response.ok) {
                throw new Error("Network response was not ok");
              }
              return response.json();
            })
            .then((result) => {
              console.log("Attribute Updated:", result);
              // Fetch and update the attribute list
              fetchAttributes();
            })
            .catch((error) =>
              console.error("Error deleting attribute:", error)
            );
        };

        const deleteAttribute = (id) => {
          const requestOptions = {
            method: "DELETE",
            headers: myHeaders,
            redirect: "follow",
          };

          fetch(`/api/v1/deleteattribute/${id}`, requestOptions)
            .then((response) => {
              if (!response.ok) {
                throw new Error("Network response was not ok");
              }
              return response.json();
            })
            .then((result) => {
              console.log("Attribute deleted:", result);
              // Fetch and update the attribute list
              fetchAttributes();
            })
            .catch((error) =>
              console.error("Error deleting attribute:", error)
            );
        };

        // Fetch attributes on page load
        fetchAttributes();

        // Handle form submission for adding a new attribute
        const addAttributeForm = document.getElementById("add-attribute-form");
        addAttributeForm.addEventListener("submit", function (event) {
          event.preventDefault();

          const attributeName = document.getElementById("attribute-name").value;

          const raw = JSON.stringify({
            name: attributeName,
          });

          const requestOptions = {
            method: "POST",
            headers: myHeaders,
            body: raw,
            redirect: "follow",
          };

          fetch("/api/v1/createattribute", requestOptions)
            .then((response) => {
              if (!response.ok) {
                throw new Error("Network response was not ok");
              }
              return response.json();
            })
            .then((result) => {
              console.log("Attribute added:", result);
              // Close the modal
              $("#attribute-modal").modal("hide");
              // Clear the form
              addAttributeForm.reset();
              // Fetch and update the attribute list
              fetchAttributes();
            })
            .catch((error) => console.error("Error adding attribute:", error));
        });

        // Handle form submission for searching attributes
        const searchForm = document.getElementById("searchForm");
        searchForm.addEventListener("submit", function (event) {
          event.preventDefault();
          const searchQuery = document.getElementById("datatableSearch_").value;
          console.log(`Search query: ${searchQuery}`);
          fetchAttributes(searchQuery);
        });
      });
    </script>

    <script
      data-cfasync="false"
      src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"
    ></script>
    <script src="https://grofresh-admin.6amtech.com/public/assets/admin/js/custom.js"></script>
    <script src="https://grofresh-admin.6amtech.com/public/assets/admin/js/vendor.min.js"></script>
    <script src="https://grofresh-admin.6amtech.com/public/assets/admin/js/theme.min.js"></script>
    <script src="https://grofresh-admin.6amtech.com/public/assets/admin/js/sweet_alert.js"></script>
    <script src="https://grofresh-admin.6amtech.com/public/assets/admin/js/toastr.js"></script>
    <script src="https://grofresh-admin.6amtech.com/public/assets/admin/js/owl.min.js"></script>
    <script type="text/javascript"></script>
    <script>
      $(document).on("ready", function () {
        var sidebar = $(".js-navbar-vertical-aside").hsSideNav();

        $(".js-nav-tooltip-link").tooltip({ boundary: "window" });

        $(".js-nav-tooltip-link").on("show.bs.tooltip", function (e) {
          if (!$("body").hasClass("navbar-vertical-aside-mini-mode")) {
            return false;
          }
        });

        $(".js-hs-unfold-invoker").each(function () {
          var unfold = new HSUnfold($(this)).init();
        });

        $(".js-form-search").each(function () {
          new HSFormSearch($(this)).init();
        });

        $(".js-select2-custom").each(function () {
          var select2 = $.HSCore.components.HSSelect2.init($(this));
        });

        $(".js-daterangepicker").daterangepicker();

        $(".js-daterangepicker-times").daterangepicker({
          timePicker: true,
          startDate: moment().startOf("hour"),
          endDate: moment().startOf("hour").add(32, "hour"),
          locale: {
            format: "M/DD hh:mm A",
          },
        });
      });
    </script>
    <script>
      "use strict";

      $(".lang_link").click(function (e) {
        e.preventDefault();
        $(".lang_link").removeClass("active");
        $(".lang_form").addClass("d-none");
        $(this).addClass("active");

        let form_id = this.id;
        let lang = form_id.split("-")[0];
        $("#" + lang + "-form").removeClass("d-none");
        if (lang == "en") {
          $(".from_part_2").removeClass("d-none");
        } else {
          $(".from_part_2").addClass("d-none");
        }
      });
    </script>
    <script>
      $(window).on("load", function () {
        if ($(".navbar-vertical-content li.active").length) {
          $(".navbar-vertical-content").animate(
            {
              scrollTop:
                $(".navbar-vertical-content li.active").offset().top - 150,
            },
            10
          );
        }
      });

      var $rows = $("#navbar-vertical-content .navbar-nav > li");
      $("#search-sidebar-menu").keyup(function () {
        var val = $.trim($(this).val()).replace(/ +/g, " ").toLowerCase();

        $rows
          .show()
          .filter(function () {
            var text = $(this).text().replace(/\s+/g, " ").toLowerCase();
            return !~text.indexOf(val);
          })
          .hide();
      });
    </script>
    <audio id="myAudio">
      <source
        src="https://grofresh-admin.6amtech.com/public/assets/admin/sound/notification.mp3"
        type="audio/mpeg"
      />
    </audio>
    <script>
      var audio = document.getElementById("myAudio");

      function playAudio() {
        audio.play();
      }

      function pauseAudio() {
        audio.pause();
      }
    </script>
    <script>
      $("#check-order").on("click", function () {
        location.href =
          "https://grofresh-admin.6amtech.com/admin/order/list/all";
      });

      setInterval(function () {
        $.get({
          url: "https://grofresh-admin.6amtech.com/admin/get-restaurant-data",
          dataType: "json",
          success: function (response) {
            let data = response.data;
            if (data.new_order > 0) {
              playAudio();
              $("#popup-modal").appendTo("body").modal("show");
            }
          },
        });
      }, 10000);

      function route_alert(route, message) {
        Swal.fire({
          title: "Are you sure ",
          text: message,
          type: "warning",
          showCancelButton: true,
          cancelButtonColor: "default",
          confirmButtonColor: "#01684b",
          cancelButtonText: "No",
          confirmButtonText: "Yes",
          reverseButtons: true,
        }).then((result) => {
          if (result.value) {
            location.href = route;
          }
        });
      }

      $(".form-alert").on("click", function () {
        let id = $(this).data("id");
        let message = $(this).data("message");
        form_alert(id, message);
      });

      function form_alert(id, message) {
        Swal.fire({
          title: "Are you sure ",
          text: message,
          type: "warning",
          showCancelButton: true,
          cancelButtonColor: "default",
          confirmButtonColor: "#01684b",
          cancelButtonText: "No",
          confirmButtonText: "Yes",
          reverseButtons: true,
        }).then((result) => {
          if (result.value) {
            $("#" + id).submit();
          }
        });
      }

      function call_demo() {
        toastr.info("Disabled for demo version!");
      }

      $(".call-demo").click(function () {
        if ("demo" === "demo") {
          call_demo();
        }
      });
    </script>
    <script>
      $(".status-change-alert").on("click", function () {
        let url = $(this).data("route");
        let message = $(this).data("message");
        status_change_alert(url, message, event);
      });

      function status_change_alert(url, message, e) {
        e.preventDefault();
        Swal.fire({
          title: "Are you sure ",
          text: message,
          type: "warning",
          showCancelButton: true,
          cancelButtonColor: "default",
          confirmButtonColor: "#107980",
          confirmButtonText: "Yes",
          cancelButtonText: "No",
          reverseButtons: true,
        }).then((result) => {
          if (result.value) {
            location.href = url;
          }
        });
      }
    </script>
    <script>
      var initialImages = [];
      $(window).on("load", function () {
        $("form")
          .find("img")
          .each(function (index, value) {
            initialImages.push(value.src);
          });
      });

      $(document).ready(function () {
        $("form").on("reset", function (e) {
          $("form")
            .find("img")
            .each(function (index, value) {
              $(value).attr("src", initialImages[index]);
            });
        });
      });
    </script>
    <script>
      $(function () {
        var owl = $(".single-item-slider");
        owl.owlCarousel({
          autoplay: false,
          items: 1,
          onInitialized: counter,
          onTranslated: counter,
          autoHeight: true,
          dots: true,
        });

        function counter(event) {
          var element = event.target; // DOM element, in this example .owl-carousel
          var items = event.item.count; // Number of items
          var item = event.item.index + 1; // Position of the current item

          if (item > items) {
            item = item - items;
          }
          $(".slide-counter").html(+item + "/" + items);
        }
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        replaceEmailsAndPhoneNumbersWithAsterisks(
          document.getElementById("demo")
        );

        // Disable mailto links
        document
          .querySelectorAll('a[href^="mailto:"]')
          .forEach(function (link) {
            link.addEventListener("click", function (event) {
              event.preventDefault();
            });
          });
        // Disable tel links
        document.querySelectorAll('a[href^="tel:"]').forEach(function (link) {
          link.addEventListener("click", function (event) {
            event.preventDefault();
          });
        });
      });

      function replaceEmailsAndPhoneNumbersWithAsterisks(element) {
        if (element.nodeType === 3) {
          // Text node
          // Use regular expressions to match email and phone number patterns
          element.nodeValue = element.nodeValue
            .replace(
              /\b([A-Za-z0-9._%+-])[^@]*@([A-Za-z0-9.-]+)\.([A-Z|a-z]{2,})\b/g,
              function (match, firstLetter, domain, tld) {
                var remainingAsterisks = "*".repeat(
                  Math.min(10, match.length - 1)
                );
                return (
                  firstLetter + remainingAsterisks + "@" + domain + "." + tld
                );
              }
            )
            .replace(
              /\b(?:\+\d{1,3}\s?)?\d{1,4}[-.\s]?\d{5,}\b/g,
              function (match) {
                if (match.length >= 8) {
                  var firstChar =
                    match.charAt(0) === "+" ? "+" : match.charAt(0);
                  var remainingAsterisks = "*".repeat(
                    Math.min(10, match.length - (firstChar === "+" ? 2 : 1))
                  );
                  return firstChar + remainingAsterisks;
                } else {
                  return match; // Don't replace if the length is less than 10
                }
              }
            );
        } else if (element.nodeType === 1) {
          // Element node
          for (var i = 0; i < element.childNodes.length; i++) {
            replaceEmailsAndPhoneNumbersWithAsterisks(element.childNodes[i]);
          }
        }
      }
    </script>

    <script>
      if (/MSIE \d|Trident.*rv:/.test(navigator.userAgent))
        document.write(
          '<script src="https://grofresh-admin.6amtech.com/public/assets/admin/vendor/babel-polyfill/polyfill.min.js"><\/script>'
        );
    </script>
  </body>
</html>
